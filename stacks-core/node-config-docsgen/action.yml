name: "Generate Configuration Documentation"
description: "Generate and upload Stacks Core configuration documentation"
branding:
  icon: "file-text"
  color: "blue"

inputs:
  output:
    description: "Output file for generated documentation"
    required: false
    default: "./node-parameters.md"
  min-doc-size:
    description: "Minimum documentation size in bytes"
    required: false
    default: "50000"
  rust-nightly-version:
    description: "Specific nightly version to use (e.g., 'nightly-2025-06-17')"
    required: false
    default: "nightly-2025-06-17"
  retention-days:
    description: "Number of days to retain the artifact"
    required: false
    default: "90"
  artifact-name:
    description: "Name for the uploaded artifact"
    required: false
    default: "node-parameters-bundle"

runs:
  using: "composite"
  steps:
    ## Checkout the code
    - name: Checkout the latest code
      id: git_checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    ## Install Rust nightly toolchain (required for rustdoc JSON output)
    - name: Install Rust nightly toolchain
      id: install_rust
      uses: actions-rust-lang/setup-rust-toolchain@fb51252c7ba57d633bc668f941da052e410add48 # v1.13.0
      with:
        toolchain: ${{ inputs.rust-nightly-version }}
        components: rust-docs-json

    ## Generate configuration documentation
    - name: Generate Configuration Documentation
      id: generate_docs
      shell: bash
      env:
        OUTPUT_FILE: ${{ inputs.output }}
        PROJECT_ROOT: ${{ github.workspace }}
      run: |
        echo "Generating configuration documentation..."

        # Navigate to the script directory and run
        bash contrib/tools/config-docs-generator/generate-config-docs.sh

        # Verify output was generated
        if [[ ! -f "$OUTPUT_FILE" ]]; then
          echo "Error: Configuration documentation was not generated"
          echo "Expected file: $OUTPUT_FILE"
          exit 1
        fi

        echo "Documentation generated successfully at $OUTPUT_FILE"

    ## Validate generated documentation quality
    - name: Validate Generated Documentation
      id: validate_docs
      shell: bash
      run: |
        echo "Validating generated documentation..."

        OUTPUT_FILE="${{ inputs.output }}"

        # Check if file exists and has content
        if [[ ! -f "$OUTPUT_FILE" ]]; then
          echo "Error: Markdown file not found at $OUTPUT_FILE"
          exit 1
        fi

        # Check file size (should be ~100kb as of 2025-07-25)
        FILE_SIZE=$(wc -c < "$OUTPUT_FILE")
        MIN_SIZE=${{ inputs.min-doc-size }}

        if [[ $FILE_SIZE -lt $MIN_SIZE ]]; then
          echo "Error: Generated documentation is too small ($FILE_SIZE bytes, minimum $MIN_SIZE)"
          echo "This likely indicates a generation failure"
          exit 1
        fi

        # Check word count and basic structure
        WORD_COUNT=$(wc -w < "$OUTPUT_FILE")
        LINE_COUNT=$(wc -l < "$OUTPUT_FILE")

        echo "Documentation validation results:"
        echo "  - File size: $FILE_SIZE bytes"
        echo "  - Word count: $WORD_COUNT words"
        echo "  - Line count: $LINE_COUNT lines"

        echo "Documentation validation completed successfully ✅"

    ## Upload documentation as artifact
    - name: Upload Documentation Artifact
      id: upload_artifact
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: ${{ inputs.artifact-name }}
        path: ${{ inputs.output }}
        retention-days: ${{ inputs.retention-days }}
        if-no-files-found: error

    ## Generate job summary
    - name: Generate Job Summary
      id: summary
      shell: bash
      run: |
        OUTPUT_FILE="${{ inputs.output }}"

        echo "## Configuration Documentation Generated ✅" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Stacks Core configuration documentation has been generated and uploaded as artifact." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Add basic file statistics
        if [[ -f "$OUTPUT_FILE" ]]; then
          FILE_SIZE=$(wc -c < "$OUTPUT_FILE")
          WORD_COUNT=$(wc -w < "$OUTPUT_FILE")
          FORMATTED_SIZE=$(numfmt --to=iec-i --suffix=B "$FILE_SIZE")

          echo "**File Size**: $FORMATTED_SIZE | **Words**: $(printf "%'d" $WORD_COUNT) | **Toolchain**: \`${{ inputs.rust-nightly-version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi

        echo "**Artifact**: \`${{ inputs.artifact-name }}\` (retained for ${{ inputs.retention-days }} days)" >> $GITHUB_STEP_SUMMARY
