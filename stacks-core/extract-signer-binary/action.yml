## Github workflow to create multiarch binaries from source
name: Create Binaries
description: "Create Binary Archives"
branding:
  icon: "archive"
  color: "gray-dark"

inputs:
  arch:
    description: "Architecture to build binary"
    required: true
  cpu:
    description: "CPU to build binary"
    required: true
  tag:
    description: "Release Tag"
    required: true
  cache_pattern:
    description: "The artifact pattern of the cache"
    required: true

runs:
  using: "composite"
  steps:
    ## Set env vars based on the type of arch build
    - name: Set local env vars
      id: set_env
      shell: bash
      run: |
        case ${{ inputs.cpu }} in
          x86-64)
            ## default x64 builds to use v3 variant.
            ARCHIVE_NAME="x64"
            ;;
          x86-64-v2)
            ## intel nehalem (2008) and newer
            ARCHIVE_NAME="x64-v2"
            ;;
          x86-64-v3)
            ## intel haswell (2013) and newer
            ARCHIVE_NAME="x64-v3"
            ;;
          x86-64-v4)
            ## intel skylake (2017) and newer
            ARCHIVE_NAME="x64-v4"
            ;;
          *)
            ARCHIVE_NAME="${{ inputs.cpu }}"
            ;;
        esac
        echo "ZIPFILE=${{ inputs.arch }}-${ARCHIVE_NAME}" >> "$GITHUB_ENV"
        echo "CACHE_NAME=${{ inputs.cache_pattern }}-binary-build-${{ inputs.arch }}-${ARCHIVE_NAME}" >> "$GITHUB_ENV"

    ## Downloads the artifacts built in `create-source-binary.yml`
    - name: Download Artifacts
      id: download_artifacts
      uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
      with:
        pattern: ${{ env.CACHE_NAME }}
        path: release
        merge-multiple: true

    - name: Test Prints
      shell: bash
      run: |
        ls
        echo "---"
        ls release

    ## Remove everything but the signer from the archive
    - name: Remove binaries
      id: remove_binaries
      shell: bash
      run: |
        zipinfo -1 ./release/${{ env.CACHE_NAME }}.zip | grep -v 'stacks-signer' | xargs -I {} zip -d ./release/${{ env.CACHE_NAME }}.zip "{}"

    ## Upload the binary artifact to the github action (used in `github-release.yml` to create a release)
    - name: Upload artifact
      id: upload_artifact
      uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
      with:
        name: ${{ inputs.tag }}-binary-build-${{ env.ZIPFILE }}
        path: ./release/${{ env.CACHE_NAME }}.zip
