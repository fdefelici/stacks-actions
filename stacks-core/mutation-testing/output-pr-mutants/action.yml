name: Output Mutants
description: "Collects the outcomes of jobs running mutants from artifacts, combines them and outputs them to github step summary"
branding:
  icon: "share"
  color: "gray-dark"

inputs:
  stackslib_package:
    description: "True if there were mutants running on stackslib package."
    required: true
  shards_for_stackslib_package:
    description: "True if mutants on stackslib were running using matrix."
    required: true
  stacks_node_package:
    description: "True if there were mutants running on stacks-node package."
    required: true
  shards_for_stacks_node_package:
    description: "True if mutants on stacks-node were running using matrix."
    required: true
  small_packages:
    description: "True if there were mutants running on small packages."
    required: true
  shards_for_small_packages:
    description: "True if mutants on small packages were running using matrix."
    required: true
  stacks_signer:
    description: "True if there were mutants running on stacks-signer package."
    required: true
  too_many_mutants:
    description: "True if the workflow would timeout because of the amount of mutants."

runs:
  using: "composite"

  steps:
    - name: Download artifacts
      id: download_artifacts
      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8

    - name: Append output from shards
      id: append_mutant_outcomes
      shell: bash
      run: |
        # Check and append the folders that should be uploaded to artifacts for the stackslib package
        if ${{ inputs.stackslib_package }} == "true"; then
          if ${{ inputs.shards_for_stackslib_package }} == "true"; then
            for i in {0..7}; do
              folders+=("mutants-shard-stackslib-$i")
            done
          else
            folders+=("mutants-shard-stackslib--1")
          fi
        fi

        # Check and append the folders that should be uploaded to artifacts for the stacks-node package
        if ${{ inputs.stacks_node_package }} == "true"; then
          if ${{ inputs.shards_for_stacks_node_package }} == "true"; then
            for i in {0..3}; do
              folders+=("mutants-shard-stacks-node-$i")
            done
          else
            folders+=("mutants-shard-stacks-node--1")
          fi
        fi

        # Check and append the folders that should be uploaded to artifacts for the small packages
        if ${{ inputs.small_packages }} == "true"; then
          if ${{ inputs.shards_for_small_packages }} == "true"; then
            for i in {0..3}; do
              folders+=("mutants-shard-small-$i")
            done
          else
            folders+=("mutants-shard-small--1")
          fi
        fi

        # Check and append the folder that should be uploaded to artifacts for the stacks-signer package
        if ${{ inputs.stacks_signer }} == "true"; then
          folders+=("mutants-shard-stacks-signer--1")
        fi

        files=("missed.txt" "caught.txt" "timeout.txt" "unviable.txt")
        mkdir -p mutants-shards

        # If the folder/file path exists, append the output to it's corresponding file name in a newly created folder that will contain all outputs combined
        # If it doesn't exits, exit early because there was an error when uploading/downloading the artifact or the mutants were not run for that specific job
        for file in "${files[@]}"; do
          for folder in "${folders[@]}"; do
            if [[ -f "$folder/$file" ]]; then
              cat "$folder/$file" >> "mutants-shards/$file"
            else
              echo "Missing necessary file or folder: $folder/$file"
              exit 1
            fi
          done
        done

        # If the folder/exit_code.txt path exists, check for the exit code and retain the most relevant one to a file
        # - 4: unmutated build failed
        # - 1: incorrect command line arguments
        # - 2, 3: found timeout/missed/unviable mutants
        # - 0: everything worked fine
        # - *: unknown exit code
        most_relevant_exit_code=0
        for folder in "${folders[@]}"; do
          if [[ -s "$folder/exit_code.txt" ]]; then
            exit_code=$(<"${folder}/exit_code.txt")

            case $exit_code in
            4)
              most_relevant_exit_code=4
              ;;
            1)
              [ "$most_relevant_exit_code" -eq 0 ] || ( [ "$exit_code" -ne 0 ] && [ "$most_relevant_exit_code" -ne 4 ] && [ "$exit_code" -lt "$most_relevant_exit_code" ] ) && most_relevant_exit_code="$exit_code"
              ;;
            0)
              ;;
            *)
              echo "Unknown exit code $exit_code"
              most_relevant_exit_code=$exit_code
              ;;
            esac
          else
            # If the file containing the exit code doesn't exist, something happened to the job that should have saved it, so default to '4'
            most_relevant_exit_code=4
          fi
        done

        echo "$most_relevant_exit_code" > './mutants-shards/exit_code.txt'

        exit 0

    - name: Print mutants
      id: print_tested_mutants
      shell: bash
      run: |
        # Info for creating the link that paths to the specific mutation tested
        server_url="${{ github.server_url }}"
        organisation="${{ github.repository_owner }}"
        repository="${{ github.event.repository.name }}"
        commit="${{ github.sha }}"

        # Function to write to github step summary with specific info depending on the mutation category
        write_section() {
          local section_title=$1
          local file_name=$2

          if [ -s "$file_name" ]; then
            if [[ "$section_title" != "" ]]; then
              echo "## $section_title" >> "$GITHUB_STEP_SUMMARY"
            fi

            if [[ "$section_title" == "Missed:" ]]; then
              echo "<details>" >> "$GITHUB_STEP_SUMMARY"
              echo "<summary>What are missed mutants?</summary>" >> "$GITHUB_STEP_SUMMARY"
              echo "<br>" >> "$GITHUB_STEP_SUMMARY"
              echo "No test failed with this mutation applied, which seems to indicate a gap in test coverage. Or, it may be that the mutant is undistinguishable from the correct code. You may wish to add a better test, or mark that the function should be skipped." >> "$GITHUB_STEP_SUMMARY"
              echo "</details>" >> "$GITHUB_STEP_SUMMARY"
              echo "" >> "$GITHUB_STEP_SUMMARY"
            elif [[ "$section_title" == "Timeout:" ]]; then
              echo "<details>" >> "$GITHUB_STEP_SUMMARY"
              echo "<summary>What are timeout mutants?</summary>" >> "$GITHUB_STEP_SUMMARY"
              echo "<br>" >> "$GITHUB_STEP_SUMMARY"
              echo "The mutation caused the test suite to run for a long time, until it was eventually killed. You might want to investigate the cause and potentially mark the function to be skipped." >> "$GITHUB_STEP_SUMMARY"
              echo "</details>" >> "$GITHUB_STEP_SUMMARY"
              echo "" >> "$GITHUB_STEP_SUMMARY"
            elif [[ "$section_title" == "Unviable:" ]]; then
              echo "<details>" >> "$GITHUB_STEP_SUMMARY"
              echo "<summary>What are unviable mutants?</summary>" >> "$GITHUB_STEP_SUMMARY"
              echo "<br>" >> "$GITHUB_STEP_SUMMARY"
              echo "The attempted mutation doesn't compile. This is inconclusive about test coverage and no action is needed, unless you wish to test the specific function, in which case you may wish to add a 'Default::default()' implementation for the specific return type." >> "$GITHUB_STEP_SUMMARY"
              echo "</details>" >> "$GITHUB_STEP_SUMMARY"
              echo "" >> "$GITHUB_STEP_SUMMARY"
            fi

            if [[ "$section_title" != "" ]]; then
              awk -F':' '{printf "- [ ] " "[" $0 "]"; file_path=$1; line=$2; $1=""; $2=""; printf "(" "'"$server_url"'/'"$organisation"'/'"$repository"'/blob/'"$commit"'/" file_path "#L" line-1 ")\n\n"}' "$file_name" >> "$GITHUB_STEP_SUMMARY"
            else
              awk -F':' '{printf "- [x] " "[" $0 "]"; file_path=$1; line=$2; $1=""; $2=""; printf "(" "'"$server_url"'/'"$organisation"'/'"$repository"'/blob/'"$commit"'/" file_path "#L" line-1 ")\n\n"}' "$file_name" >> "$GITHUB_STEP_SUMMARY"
            fi

            if [[ "$section_title" == "Missed:" ]]; then
              echo "### To resolve this issue, consider one of the following options:" >> "$GITHUB_STEP_SUMMARY"
              echo "- Modify or add tests including this function." >> "$GITHUB_STEP_SUMMARY"
              echo "- If you are absolutely certain that this function should not undergo mutation testing, add '#[mutants::skip]' or '#[cfg_attr(test, mutants::skip)]' function header to skip it." >> "$GITHUB_STEP_SUMMARY"
            elif [[ "$section_title" == "Timeout:" ]]; then
              echo "### To resolve this issue, consider one of the following options:" >> "$GITHUB_STEP_SUMMARY"
              echo "- Modify the tests that include this funcion." >> "$GITHUB_STEP_SUMMARY"
              echo "- Add '#[mutants::skip]' or '#[cfg_attr(test, mutants::skip)]' function header to skip it." >> "$GITHUB_STEP_SUMMARY"
            elif [[ "$section_title" == "Unviable:" ]]; then
              echo "### To resolve this issue, consider one of the following options:" >> "$GITHUB_STEP_SUMMARY"
              echo "- Create 'Default::default()' implementation for the specific structure." >> "$GITHUB_STEP_SUMMARY"
              echo "- Add '#[mutants::skip]' or '#[cfg_attr(test, mutants::skip)]' function header to skip it." >> "$GITHUB_STEP_SUMMARY"
            fi

            echo >> "$GITHUB_STEP_SUMMARY"
          fi
        }

        # Print uncaught (missed/timeout/unviable) mutants to summary
        if [ -s ./mutants-shards/missed.txt -o -s ./mutants-shards/timeout.txt -o -s ./mutants-shards/unviable.txt ]; then
          echo "# Uncaught Mutants" >> "$GITHUB_STEP_SUMMARY"
          echo "[Documentation - How to treat Mutants Output](https://github.com/stacks-network/actions/tree/main/stacks-core/mutation-testing#how-mutants-output-should-be-treated)" >> "$GITHUB_STEP_SUMMARY"
          write_section "Missed:" "./mutants-shards/missed.txt"
          write_section "Timeout:" "./mutants-shards/timeout.txt"
          write_section "Unviable:" "./mutants-shards/unviable.txt"
        fi

        # Print caught mutants to summary
        if [ -s ./mutants-shards/caught.txt ]; then
          echo "# Caught Mutants" >> "$GITHUB_STEP_SUMMARY"
          write_section "" "./mutants-shards/caught.txt"
        fi

        # Get most relevant exit code from the file and match it
        exit_code=$(<"mutants-shards/exit_code.txt")

        yellow_bold="\033[1;33m"
        reset="\033[0m"
        summary_link_message="${yellow_bold}Click here for more information on how to fix:${reset} ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}#:~:text=Output%20Mutants%20summary"

        case $exit_code in
          0)
              if [[ ! -f ./mutants-shards/caught.txt && ! -f ./mutants-shards/missed.txt && ! -f ./mutants-shards/timeout.txt && ! -f ./mutants-shards/unviable.txt ]]; then
                echo "No mutants found to test!"    
              elif [[ -s ./mutants-shards/unviable.txt ]]; then
                echo -e "$summary_link_message"
                echo "Found unviable mutants!"
                exit 5
              else
                echo "All new and updated functions are caught!"  
              fi
            ;;
          1)
            echo -e "$summary_link_message"
            echo "Invalid command line arguments!"
            exit $exit_code
            ;;
          2)
            echo -e "$summary_link_message"
            echo "Found missed mutants!"
            exit $exit_code
            ;;
          3)
            echo -e "$summary_link_message"
            echo "Found timeout mutants!"
            exit $exit_code
            ;;
          4)
            echo -e "$summary_link_message"
            echo "Building the packages failed without any mutations!"
            exit $exit_code
            ;;
          *)
            echo -e "$summary_link_message"
            echo "Unknown exit code: $exit_code"
            exit $exit_code
          ;;
        esac

        if ${{ inputs.too_many_mutants }} == "true"; then
          echo "Mutants on some of the packages were not run because the workflow would have been timeouted."
          exit 1
        fi

        exit 0
