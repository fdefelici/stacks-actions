name: Check Packages and Shards
description: "Checks which types of packages are contained in the diffs and how many mutants there are"
branding:
  icon: "check"
  color: "gray-dark"

inputs:
  ignore_timeout:
    description: "Whether to ignore the mutants timeout limit or not."
    required: true

outputs:
  run_stackslib:
    description: "True if there are mutants on `stackslib` package."
    value: ${{ steps.check_packages_and_shards.outputs.run_stackslib }}
  stackslib_with_shards:
    description: "True if there are more than 7 mutants on `stackslib`."
    value: ${{ steps.check_packages_and_shards.outputs.stackslib_with_shards }}
  run_stacks_node:
    description: "True if there are mutants on `stacks-node` package."
    value: ${{ steps.check_packages_and_shards.outputs.run_stacks_node }}
  stacks_node_with_shards:
    description: "True if there are more than 19 mutants on `stacks-node`."
    value: ${{ steps.check_packages_and_shards.outputs.stacks_node_with_shards }}
  run_small_packages:
    description: "True if there are mutants on other packages than `stackslib`, `stacks-node` or `stacks-signer`."
    value: ${{ steps.check_packages_and_shards.outputs.run_small_packages }}
  small_packages_with_shards:
    description: "True if there are more than 79 mutants on small packages."
    value: ${{ steps.check_packages_and_shards.outputs.small_packages_with_shards }}
  run_stacks_signer:
    description: "True if there are mutants on `stacks-signer` package."
    value: ${{ steps.check_packages_and_shards.outputs.run_stacks_signer }}
  too_many_mutants:
    description: "True if the workflow would timeout because of the amount of mutants."
    value: ${{ steps.check_packages_and_shards.outputs.too_many_mutants }}

runs:
  using: "composite"

  steps:
    - name: Checkout stacks-core repo
      id: checkout_stacks_core
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 0

    - name: Install cargo-mutants
      shell: bash
      id: install_cargo_mutants
      run: |
        cargo install --version 24.7.1 cargo-mutants --locked # v24.7.1

    - name: Relative diff
      id: relative_diff
      shell: bash
      run: |
        git diff $(git merge-base origin/${{ github.base_ref || 'develop' }} HEAD)..HEAD > git.diff

    - name: Update git diff
      id: update_git_diff
      shell: bash
      run: |
        input_file="git.diff"
        temp_file="temp_diff_file.diff"

        # Check if the file exists and is not empty
        if [ ! -s "$input_file" ]; then
          echo "Diff file ($input_file) is missing or empty!"
          exit 1
        fi

        # Remove all lines related to deleted files including the first 'diff --git' line
        awk '
          /^diff --git/ {
            diff_line = $0
            getline
            if ($0 ~ /^deleted file mode/) {
              in_deleted_file_block = 1
            } else {
              if (diff_line != "") {
                print diff_line
                diff_line = ""
              }
              in_deleted_file_block = 0
            }
          }
          !in_deleted_file_block
        ' "$input_file" > "$temp_file" && mv "$temp_file" "$input_file"

        # Remove 'diff --git' lines only when followed by 'similarity index', 'rename from', and 'rename to'
        awk '
          /^diff --git/ {
            diff_line = $0
            getline
            if ($0 ~ /^similarity index/) {
              getline
              if ($0 ~ /^rename from/) {
                getline
                if ($0 ~ /^rename to/) {
                  next
                }
              }
            }
            print diff_line  
          }
          { print }
        ' "$input_file" > "$temp_file" && mv "$temp_file" "$input_file"

    - name: Split diffs
      id: split_diffs_by_packages
      shell: bash
      run: |
        # Check that the file exists before performing actions on it
        if [ ! -s git.diff ]; then
          echo "Diff file (git.diff) is missing or empty!"
          exit 1
        fi

        # Make a file containing all the mutants for the differences in the PR and a folder to split them into big and small packages
        cargo mutants --in-diff git.diff --list > all_mutants.txt
        if [ $? -ne 0 ]; then 
          echo "Error retrieving the list of mutants!"
          exit $?
        fi

        mkdir -p mutants_by_packages

        # Check that the file exists before performing actions on it
        if [ ! -f all_mutants.txt ]; then
          echo "The file containing mutants (all_mutants.txt) is missing!"
          exit 1
        fi

        # Split the differences from git into packages: 'stackslib', 'stacks-node', 'stacks-signer' and small packages (all others) and put them into separate files
        while IFS= read -r line; do
          package=$(echo "$line" | cut -d'/' -f1)

          case $package in
            "stackslib")
              echo "$line" >> "mutants_by_packages/stackslib.txt"
              ;;
            "testnet")
              echo "$line" >> "mutants_by_packages/stacks-node.txt"
              ;;
            "stacks-signer")
              echo "$line" >> "mutants_by_packages/stacks-signer.txt"
              ;;
            *)
              echo "$line" >> "mutants_by_packages/small-packages.txt"
              ;;
          esac
        done < all_mutants.txt

        exit 0

    - name: Check packages and shards
      id: check_packages_and_shards
      shell: bash
      run: |
        number_of_stackslib_mutants=0
        number_of_stacks_node_mutants=0
        number_of_small_mutants=0

        stackslib_too_many_mutants=false
        stacks_node_too_many_mutants=false

        # If stackslib.txt file exists, count how many mutants there are
        if [[ -s mutants_by_packages/stackslib.txt ]]; then
          number_of_stackslib_mutants=$(cat mutants_by_packages/stackslib.txt | awk 'END { print NR }' | tr -d '[:space:]')
        fi

        # If stacks-node.txt file exists, count how many mutants there are
        if [[ -s mutants_by_packages/stacks-node.txt ]]; then
          number_of_stacks_node_mutants=$(cat mutants_by_packages/stacks-node.txt | awk 'END { print NR }' | tr -d '[:space:]')
        fi

        # If small-packages.txt file exists, count how many mutants there are
        if [[ -s mutants_by_packages/small-packages.txt ]]; then
          number_of_small_mutants=$(cat mutants_by_packages/small-packages.txt | awk 'END { print NR }' | tr -d '[:space:]')
        fi

        # If stacks_signer file exists and is not empty, run mutants on stacks-signer package
        if [[ -s mutants_by_packages/stacks-signer.txt ]]; then
          # Disable mutants on 'stacks-signer' package for the moment due to unexpected failures
          # echo "run_stacks_signer=true" >> "$GITHUB_OUTPUT"
          echo "run_stacks_signer=false" >> "$GITHUB_OUTPUT"
        else
          echo "run_stacks_signer=false" >> "$GITHUB_OUTPUT"
        fi

        # If there are mutants from stackslib package, check whether to run or not and with or without shards
        if [[ $number_of_stackslib_mutants -ne 0 ]]; then
          if [[ "${{ inputs.ignore_timeout }}" != "true" && $number_of_stackslib_mutants -gt 72 ]]; then
            stackslib_too_many_mutants=true
            echo "run_stackslib=false" >> "$GITHUB_OUTPUT"
            echo "stackslib_with_shards=false" >> "$GITHUB_OUTPUT"
          else
            echo "run_stackslib=true" >> "$GITHUB_OUTPUT"
            if [[ $number_of_stackslib_mutants -gt 7 ]]; then
              echo "stackslib_with_shards=true" >> "$GITHUB_OUTPUT"
            else
              echo "stackslib_with_shards=false" >> "$GITHUB_OUTPUT"
            fi
          fi
        else
          echo "run_stackslib=false" >> "$GITHUB_OUTPUT"
          echo "stackslib_with_shards=false" >> "$GITHUB_OUTPUT"
        fi

        # If there are mutants from stacks-node package, check whether to run or not and with or without shards
        if [[ $number_of_stacks_node_mutants -ne 0 ]]; then
          if [[ "${{ inputs.ignore_timeout }}" != "true" && $number_of_stacks_node_mutants -gt 540 ]]; then
            stacks_node_too_many_mutants=true
            echo "run_stacks_node=false" >> "$GITHUB_OUTPUT"
            echo "stacks_node_with_shards=false" >> "$GITHUB_OUTPUT"
          else
            echo "run_stacks_node=true" >> "$GITHUB_OUTPUT"
            if [[ $number_of_stacks_node_mutants -gt 19 ]]; then
              echo "stacks_node_with_shards=true" >> "$GITHUB_OUTPUT"
            else
              echo "stacks_node_with_shards=false" >> "$GITHUB_OUTPUT"
            fi
          fi
        else
          echo "run_stacks_node=false" >> "$GITHUB_OUTPUT"
          echo "stacks_node_with_shards=false" >> "$GITHUB_OUTPUT"
        fi

        # If there are mutants from small packages, check whether to run or not and with or without shards
        if [[ $number_of_small_mutants -ne 0 ]]; then
          echo "run_small_packages=true" >> "$GITHUB_OUTPUT"
          if [[ $number_of_small_mutants -gt 79 ]]; then
            echo "small_packages_with_shards=true" >> "$GITHUB_OUTPUT"
          else
            echo "small_packages_with_shards=false" >> "$GITHUB_OUTPUT"
          fi
        else
          echo "run_small_packages=false" >> "$GITHUB_OUTPUT"
          echo "small_packages_with_shards=false" >> "$GITHUB_OUTPUT"
        fi

        # Print uncaught (missed/timeout/unviable) mutants to summary
        if [[ $stacks_node_too_many_mutants == true || $stackslib_too_many_mutants == true ]]; then
          echo "too_many_mutants=true" >> "$GITHUB_OUTPUT"

          echo "# Packages Exceeding Default CI Runtime" >> "$GITHUB_STEP_SUMMARY"
          echo "The following packages surpass the default Continuous Integration (CI) runtime limit of 6 hours:" >> "$GITHUB_STEP_SUMMARY"

          if [[ $stackslib_too_many_mutants == true ]]; then
            echo "- stackslib has $number_of_stackslib_mutants mutants, while the limit is 72." >> "$GITHUB_STEP_SUMMARY"
          fi

          if [[ $stacks_node_too_many_mutants == true ]]; then 
            echo "- stacks-node has $number_of_stacks_node_mutants mutants, while the limit is 540." >> "$GITHUB_STEP_SUMMARY"
          fi

          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "To ensure these packages are processed, it's recommended to tag [@stacks-network/blockchain-team](https://github.com/orgs/stacks-network/teams/blockchain-team) team in the pull request so the CI can be extended for these packages." >> "$GITHUB_STEP_SUMMARY"
          echo "Alternatively, you can run the packages locally by following the instructions in the [documentation](https://github.com/stacks-network/stacks-core/blob/develop/docs/mutation-testing.md), but it will take more time and the CI action has a better formatted output." >> "$GITHUB_STEP_SUMMARY"
        else
          echo "too_many_mutants=false" >> "$GITHUB_OUTPUT"
        fi

        exit 0
